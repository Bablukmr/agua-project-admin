"use client";
import React, { useState, useEffect } from "react";
import TextField from "@mui/material/TextField";
import Button from "@mui/material/Button";
import { styled } from "@mui/material/styles";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import ResponsiveAppBar from "./componets/header";

export default function Home() {
  const [formData, setFormData] = useState({
    title: "",
    description: "",
  });

  const [selectedFile, setSelectedFile] = useState(null);
  const [fileError, setFileError] = useState("");
  const [formError, setFormError] = useState("");
  const [banners, setBanners] = useState([]);

  useEffect(() => {
    // Fetch the banners when the component mounts
    fetchBanners();
  }, []);

  const fetchBanners = async () => {
    try {
      const response = await fetch("http://localhost:3000/banner");
      const data = await response.json();
      console.log(data,"9h09");
      setBanners(data.result);
    } catch (error) {
      console.error("Error fetching banners:", error);
    }
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];

    if (file && file.type.startsWith("image/")) {
      setSelectedFile(file);
      setFileError("");
    } else {
      setSelectedFile(null);
      setFileError("Please select a valid image file.");
    }
  };

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleSubmit = async () => {
    if (!formData.title || !formData.description || !selectedFile) {
      setFormError("All fields are required.");
      return;
    }

    if (!selectedFile.type.startsWith("image/")) {
      setFileError("Please select a valid image file.");
      return;
    }

    const formDataToSend = new FormData();
    formDataToSend.append("title", formData.title);
    formDataToSend.append("description", formData.description);
    formDataToSend.append("imageUrl", selectedFile);

    try {
      const response = await fetch("http://localhost:3000/banner", {
        method: "POST",
        body: { title: "ewew", description: "eh93f9", imageUrl: "imageUrl" },
      });

      const data = await response.json();
      console.log(data);

      // Reset form after submission
      setFormData({
        title: "",
        description: "",
      });
      setSelectedFile(null);
      setFormError("");

      // Refetch banners to update the list
      fetchBanners();
    } catch (error) {
      console.error("Error submitting data:", error);
      setFormError("Error submitting data. Please try again.");
    }
  };

  const VisuallyHiddenInput = styled("input")({
    clip: "rect(0 0 0 0)",
    clipPath: "inset(50%)",
    height: 1,
    overflow: "hidden",
    position: "absolute",
    bottom: 0,
    left: 0,
    whiteSpace: "nowrap",
    width: 1,
  });

  return (
    <div>
      <ResponsiveAppBar />
      <div className="w-full h-full mt-6 flex flex-col items-center justify-center">
        <h1 className="text-xl font-semibold my-4">Add Banner Details</h1>
        <form className="w-[80%] md:w-[50%] xl:w-[30%] flex gap-4 flex-col items-center justify-center">
          <TextField
            fullWidth
            label="Title"
            required
            name="title"
            value={formData.title}
            onChange={handleInputChange}
          />
          <TextField
            fullWidth
            label="Description"
            required
            multiline
            minRows={4}
            name="description"
            value={formData.description}
            onChange={handleInputChange}
          />
          <div className="w-full flex items-center justify-between gap-4">
            <Button
              className="w-[50%]"
              component="label"
              variant="contained"
              startIcon={<CloudUploadIcon />}
            >
              Upload File
              <VisuallyHiddenInput type="file" onChange={handleFileChange} />
            </Button>
            <p className="w-[40%]">
              {selectedFile ? selectedFile.name : "No file selected"}
            </p>
          </div>
          {fileError && <p className="text-red-500">{fileError}</p>}
          {formError && <p className="text-red-500">{formError}</p>}
          <div className="w-full mt-4">
            <Button
              className="bg-green-900 hover:bg-green-600 text-white w-full"
              onClick={handleSubmit}
            >
              Submit
            </Button>
          </div>
        </form>
        <div className="mt-6">
          <h2 className="text-xl font-semibold mb-2">Banners</h2>
          <ul>
            {banners.map((banner) => (
              <li key={banner._id}>{banner.title}</li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
}
